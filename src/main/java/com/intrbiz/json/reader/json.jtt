 options {
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(JSONReaderInternal)

package com.intrbiz.json.reader;

import com.intrbiz.json.JSArray;
import com.intrbiz.json.JSBoolean;
import com.intrbiz.json.JSNumber;
import com.intrbiz.json.JSObject;
import com.intrbiz.json.JSString;
import com.intrbiz.json.JSValue;
import com.intrbiz.json.JSCustomObject;
import com.intrbiz.json.util.StringSerialiser;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;

@SuppressWarnings("all")
final class JSONReaderInternal {

}

PARSER_END(JSONReaderInternal)

SKIP : { " " | "\t" | "\n" | "\r" }
/*
 * Technically Json does not allow leading zeros in numbers, but we
 * will allow that.
 */
TOKEN : {
  <EXPONENT : ("e"|"E")["+","-","0"-"9"](["0"-"9"])*>
  | <DIGITS : (["0"-"9"])+>
  | <NULL : "null">  
  | <NAN : "NaN">
  | <INFINITY : "Infinity">
  | <BOOLEAN : ("true" | "false")>
  | <FRACSEP: ".">
  | <NEW : "new">  
  | <IDENTIFIER_SANS_EXPONENT : ["a"-"d","f"-"z","A"-"D","F"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | <IDENTIFIER_STARTS_WITH_EXPONENT : ["e","E"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | <#HEX_CHAR : ["a"-"f","A"-"F","0"-"9"]>
  | <UNICODE_CHAR : "\\u" <HEX_CHAR><HEX_CHAR><HEX_CHAR><HEX_CHAR> >
  | <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\"", "/"] >
  | <SINGLE_QUOTE_LITERAL: "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPE_CHAR> | <UNICODE_CHAR>)* "\'" >
  | <DOUBLE_QUOTE_LITERAL: "\"" ( (~["\"","\\","\n","\r"]) | <ESCAPE_CHAR> | <UNICODE_CHAR>)* "\"" >
  | <QUOTE : "\""> : STRING_STATE
}

<STRING_STATE> MORE  : { "\\" : ESC_STATE }
<STRING_STATE> TOKEN : {
  <ENDQUOTE : <QUOTE> > : DEFAULT
| <CHAR : ~["\"","\\"]>
}
<ESC_STATE> TOKEN : {
  <CNTRL_ESC : ["\"","\\","/","b","f","n","r","t"]> : STRING_STATE
}
<ESC_STATE> MORE  : { "u" : HEX_STATE }
<HEX_STATE>  TOKEN : {
  <#HEX : ["a"-"f","A"-"F","0"-"9"]>
| <HEX_ESC : <HEX><HEX><HEX><HEX> > : STRING_STATE
}

public JSValue readValue() :
{
  JSValue json = null;
}
{
  [")]}'\n"]( json=jsObject() |
    json=jsArray() |
    json=jsPrimitive() |
    json=jsNull() |
    json=jsCustom())
  { return json; }
}

private JSObject jsObject() :
{
  JSObject o = new JSObject();
}
{
  "{" [ Members(o) ] "}"
  { return o; }
}

private JSValue jsNull() :
{
  Token t;
}
{
  t = <NULL> { return null; }
}

private void Members(JSObject o) :
{ }
{
  Pair(o) [ "," Members(o) ]
}

private void Pair(JSObject o) :
{
  String property;
  JSValue value;
}
{
  property=jsMemberName() ":" value=jsValue()
  {
    o.addMember(property, value);
  }
}

private String jsMemberName() : 
{ Token t = null; JSString value = null; }
{
  (value=jsString() | t=Identifier() ) 
  { 
  	if ( value != null )
  		return value.getString();
  	else
  		return t.image ;
  }
}

private JSValue jsCustom() :
{
	JSCustomObject co = new JSCustomObject();
	List<String> cn = new LinkedList<String>();
}
{
	<NEW> cIdentifier(cn) "(" [ arguments(co) ] ")"
	{
		Collections.reverse(cn);
		StringBuffer sb = new StringBuffer();
		boolean nd = false;
		for (String cp : cn)
		{
			if (nd) sb.append(".");
			sb.append(cp);
			nd = true;
		}
		co.setClassname(sb.toString());
		co.reverse();
		return co;
	}
}

private void cIdentifier(List<String> cn) :
{
	Token t ;
}
{
	(t = <IDENTIFIER_STARTS_WITH_EXPONENT> | t = <IDENTIFIER_SANS_EXPONENT>) [ "." cIdentifier(cn) ]
	{
		cn.add(t.image);
	}
}

private void arguments(JSCustomObject co) :
{
  JSValue element;
}
{
  element=jsValue() [ "," arguments(co) ]
  { co.addArgument(element); }
}

private JSArray jsArray() :
{ JSArray array = new JSArray(); }
{
  "[" [ Elements(array) ] "]"
  {
    array.reverse();
    return array;
  }
}

private void Elements(JSArray array) :
{
  JSValue element;
}
{
  element=jsValue() [ "," Elements(array) ]
  { array.addElement(element); }
}

private JSValue jsValue() :
{ JSValue o = null; }
{
( o=jsString() |
  o=jsNumber() |
  o=jsObject() |
  o=jsArray() |
  o=jsBoolean() |
  o=jsCustom() |
  o=jsNull() )
  { return o; }
}

private JSBoolean jsBoolean() :
{ Token t; }
{
  t=<BOOLEAN> {
    boolean value = Boolean.valueOf(t.image);
    return new JSBoolean(value);
  }
}

private JSValue jsPrimitive() :
{
  JSValue value;
}
{
  ( value=jsString()) { return value; } |
  ( value=jsNumber()) { return value; } |
  ( value=jsBoolean()) { return value; } 
}

private JSNumber jsNumber() :
{
  String intpart = null,
         fracpart = null,
         exppart = null;
  JSNumber value;
}
{
  LOOKAHEAD(2)
  (value=jsSpecialNumbers()) {return value; } |		 
  (intpart=jsInt() [ fracpart=jsFrac() ] [ exppart=jsExp() ])
  {
    Number n;
    if (exppart != null || fracpart != null) {
      fracpart = (fracpart == null) ? "" : fracpart;
      exppart = (exppart == null) ? "" : exppart;
      n = new java.math.BigDecimal(intpart + fracpart + exppart);
    } else {
      n = new java.math.BigInteger(intpart);
    }
    return new JSNumber(n);
  }
}

private JSNumber jsSpecialNumbers() : 
{
  boolean negative = false;		 
}		 
{		 
  (<NAN>) {return new JSNumber(Double.NaN); } |
  (["-" {negative = true;}]<INFINITY>) {return new JSNumber(negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY); }
}

private String jsInt() :
{
  String digits;
  boolean negative = false;
}
{
  ["-" { negative = true; } ] digits=Digits()
  {
    if(negative)
      return "-" + digits;
    return digits;
  }
}

private String jsFrac() :
{ String digits; }
{
  <FRACSEP> digits=Digits()
  { return "." + digits; }
}

private String jsExp() :
{ Token t; }
{
  t = <EXPONENT> {return t.image;} 
} 

private Token Identifier() :
{ Token t; }
{
  (t = <IDENTIFIER_STARTS_WITH_EXPONENT> | t = <IDENTIFIER_SANS_EXPONENT>) {return t;} 
} 

private String Digits() :
{ Token t; }
{
  t=<DIGITS>
  { return t.image; }
}

private JSString jsString() :
{ Token t; }
{
  (t=<SINGLE_QUOTE_LITERAL> | t=<DOUBLE_QUOTE_LITERAL>) { 
    String value = StringSerialiser.decode(t.image);    
    return new JSString(value); 
  }
}
